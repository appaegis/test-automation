const { expect } = require("@playwright/test");
const { TextField, Button, DropdownWithSearch } = require("../components/common");
const { OldTable } = require("../components/Table");

class CertificateDetails {
  constructor(page) {
    this.page = page;
    this.context = this.page.locator("main", {
      has: this.page.locator("div:has-text(\"SSH CA Certificate Detail\")"),
    });
    this.name = new TextField(this.context, "Name");
    this.certificateType = new DropdownWithSearch(this.context, "Generated by");
    this.commonName = new TextField(this.context, "Common Name");
    this.saveButton = new Button(this.context, "Save");
    this.publicKey = this.context.locator("xpath=//div[contains(normalize-space(), 'Public Key')]//following-sibling::div//div[contains(@class, 'information_div') and contains(normalize-space(), 'ssh-rsa')]");
  }
}

exports.SSHCertificates = class SSHCertificates {
  constructor(page) {
    this.page = page;
    this.context = this.page.locator("main", {
      has: this.page.locator("div:has-text(\"SSH CA Certificates\")"),
    });
    this.search = this.context.locator("xpath=//input[@name=\"search\"]");

    this.addCAButton = new Button(this.context, "CA");

    // Old div table part.
    this.oldTable = new OldTable(this.context);

    // Detail page part.
    this.detailsPage = new CertificateDetails(this.page);

    // Div modal part.
    this.modal = this.page.locator("main", {
      has: this.page.locator("div[class*='modal_c_content']:has-text('CA Certificate Information')"),
    });
    this.okButton = new Button(this.modal, "Ok");
  }

  async goto() {
    await this.page.goto("/ssh/certificates", { timeout: parseInt(process.env.LONG_TIMEOUT) });
    await this.context.waitFor();
  }

  async addSelfGeneratedCA(name, CN) {
    await this.addCAButton.click();
    await this.detailsPage.name.fill(name);
    await this.detailsPage.certificateType.open();
    await this.detailsPage.certificateType.select("Self-generated");
    await this.detailsPage.certificateType.close();
    await this.detailsPage.commonName.fill(CN);
    await this.detailsPage.saveButton.click();
    await expect(this.modal).toBeVisible({ timeout: parseInt(process.env.LONG_TIMEOUT) });
    await this.okButton.click();
  }

  async inputSearch(searchText) {
    await this.search.click();
    await this.search.fill("");
    await this.search.fill(searchText);
    await this.search.press("Enter");
  }

  async getPublicKey() {
    const publicKey = await this.publicKey.textContent();
    return publicKey.trim().replace(/Copy public Key/g, "");
  }
};
